name: Wheels

on:
  push:
    branches:
      - master
      - dev
env:
  NPROC: 2

jobs:
  wheels:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
      matrix:
        include:
          - os: ubuntu-latest
            cibw-arch: manylinux_x86_64
          # - runs-on: ubuntu-latest
          #   cibw-arch: manylinux_i686
          # - runs-on: macos-latest
          #   cibw-arch: macosx_x86_64
          # - runs-on: windows-latest
          #   cibw-arch: win_amd64
          # - runs-on: windows-latest
          #   cibw-arch: win32
          #   python-arch: x86
          #   cmake-arch: -A Win32
    env:
      # CIBW_BUILD: "cp36-* cp37-*"
      CIBW_SKIP: "cp27-* cp35-* cp39-* cp27-* pp27-* pp36-* pp37-*"
      # CIBW_BUILD: "cp35-* cp36-* cp37-* cp38-* cp39-*"
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Set up Python version
        uses: actions/setup-python@v2
        with:
          python-version: 3.6

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v1.4

      - name: Install requirements
        run: |
          python -m pip install cibuildwheel twine

      - name: Configure cibuildwheel
        shell: bash
        run: |
          echo "CIBW_BUILD=*-${{ matrix.cibw-arch }}" >> $GITHUB_ENV
          echo "CIBW_BEFORE_ALL_LINUX=pip install cmake && ln -s \$(which cmake) /usr/local/bin/cmake" >> $GITHUB_ENV

      - name: Build Wheels
        run: |
          python3 -m cibuildwheel --output-dir wheelhouse

      - name: Show files
        run: ls -lh wheelhouse

      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          path: wheelhouse/*.whl
            

  # build-wheel:
  #   name: Build wheel
  #   runs-on: Ubuntu-18.04
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       python_version: [3.6, 3.7, 3.8]
  #   env:
  #     BUILD_CUDA_MODULE: ON
  #     OPEN3D_ML_ROOT: ${{ github.workspace }}/Open3D-ML
  #     DEVELOPER_BUILD: ${{ github.event.inputs.developer_build }}
  #   steps:
  #     - name: Checkout source code
  #       uses: actions/checkout@v2
  #       with:
  #         submodules: true

  #     - name: Checkout Open3D-ML source code
  #       uses: actions/checkout@v2
  #       with:
  #         repository: intel-isl/Open3D-ML
  #         path: ${{ env.OPEN3D_ML_ROOT }}

  #     - name: Setup cache
  #       uses: actions/cache@v2
  #       with:
  #         # Ref: https://github.com/apache/incubator-mxnet/pull/18459/files
  #         path: ~/.ccache
  #         # We include the commit sha in the cache key, as new cache entries are
  #         # only created if there is no existing entry for the key yet.
  #         key: ${{ runner.os }}-ccache-${{ github.sha }}
  #         # Restore any ccache cache entry, if none for
  #         # ${{ runner.os }}-ccache-${{ github.sha }} exists.
  #         # Common prefix will be used so that ccache can be used across commits.
  #         restore-keys: |
  #           ${{ runner.os }}-ccache
  #     - name: Set up Python version
  #       uses: conda-incubator/setup-miniconda@v2
  #       with:
  #         auto-update-conda: false
  #         python-version: ${{ matrix.python_version }}
  #     # Pre-installed 18.04 packages: https://git.io/JfHmW
  #     - name: Install dependencies
  #       shell: bash -l {0}
  #       run: |
  #         ./util/install_deps_ubuntu.sh assume-yes
  #         sudo apt-get --yes install ccache
  #         ccache -M 500M  # See .github/workflows/readme.md for ccache strategy.
  #         source util/ci_utils.sh
  #         echo
  #         install_cuda_toolkit with-cudnn purge-cache
  #         nvcc --version
  #         # Export PATH and LD_LIBRARY_PATH (for CUDA) for the next step
  #         echo "PATH=$PATH" >> $GITHUB_ENV
  #         echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH" >> $GITHUB_ENV
  #         echo
  #         echo "Installing CPU versions of packages"
  #         install_python_dependencies with-conda
  #         echo
  #         echo -n "Using conda"
  #         conda info
  #         echo "Using python: $(which python)"
  #         python --version
  #         echo -n "Using pip: "
  #         python -m pip --version
  #         echo "Using cmake: $(which cmake)"
  #         cmake --version

  #     - name: Config and build wheel
  #       shell: bash -l {0}
  #       run: |
  #         PATH=/usr/lib/ccache:$PATH
  #         ccache -s
  #         source util/ci_utils.sh
  #         build_pip_conda_package build_azure_kinect
  #         ccache -s
  #         PIP_PKG_NAME="$(basename build/lib/python_package/pip_package/open3d*.whl)"
  #         echo "PIP_PKG_NAME=$PIP_PKG_NAME" >> $GITHUB_ENV
  #         CONDA_PKG_NAME="$(basename build/lib/python_package/conda_package/linux-64/open3d*.tar.bz2)"
  #         echo "CONDA_PKG_NAME=$CONDA_PKG_NAME" >> $GITHUB_ENV

  #     - name: Upload wheel
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: open3d_linux_x86_64_wheels
  #         path: |
  #           build/lib/python_package/pip_package/${{ env.PIP_PKG_NAME }}
  #           build/lib/python_package/conda_package/linux-64/${{ env.CONDA_PKG_NAME }}
  #         if-no-files-found: error

  #     - name: GCloud CLI setup
  #       if: ${{ github.ref == 'refs/heads/master' }}
  #       uses: google-github-actions/setup-gcloud@master
  #       with:
  #         version: ${{ env.GCE_CLI_GHA_VERSION }}
  #         service_account_key: ${{ secrets.GCE_SA_KEY_GPU_CI }}
  #         project_id: ${{ secrets.GCE_DOCS_PROJECT }}
  #         export_default_credentials: true

  #     - name: Upload wheel to GCS bucket
  #       if: ${{ github.ref == 'refs/heads/master' }}
  #       env:
  #         python_version: ${{ matrix.python_version }}
  #       run: |
  #         PYTAG="-cp$(echo ${{ env.python_version }} | tr -d '.')"
  #         gsutil cp build/lib/python_package/pip_package/${{ env.PIP_PKG_NAME }} gs://open3d-releases-master/python-wheels/
  #         echo "Download pip package at: https://storage.googleapis.com/open3d-releases-master/python-wheels/${{ env.PIP_PKG_NAME }}"
  #         gsutil cp build/lib/python_package/conda_package/linux-64/${{ env.CONDA_PKG_NAME }} gs://open3d-releases-master/conda_package/linux-64/
  #         echo "Download conda package at: https://storage.googleapis.com/open3d-releases-master/conda_package/linux-64/${{ env.CONDA_PKG_NAME }}"

  # test-wheel:
  #   name: Test wheel
  #   runs-on: ubuntu-18.04
  #   needs: [build-wheel]
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       python_version: [3.6, 3.7, 3.8]
  #   env:
  #     OPEN3D_ML_ROOT: ${{ github.workspace }}/Open3D-ML
  #   steps:
  #     - name: Checkout source code
  #       uses: actions/checkout@v2
  #       with:
  #         submodules: false

  #     - name: Checkout Open3D-ML source code
  #       uses: actions/checkout@v2
  #       with:
  #         repository: intel-isl/Open3D-ML
  #         path: ${{ env.OPEN3D_ML_ROOT }}

  #     - name: Download wheels
  #       uses: actions/download-artifact@v2
  #       # See https://github.com/dawidd6/action-download-artifact for more
  #       # flexible artifact download options
  #       with:
  #         name: open3d_linux_x86_64_wheels
  #     - name: Set up Python
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: ${{ matrix.python_version }}

  #     - name: Test Python package
  #       run: |
  #         python -V
  #         source util/ci_utils.sh
  #         pi_tag=$(python -c "import sys; print(f'cp{sys.version_info.major}{sys.version_info.minor}')")
  #         test_wheel pip_package/open3d*-"$pi_tag"-*.whl

  #     - name: Run Python unit tests (benchmarks)
  #       run: |
  #         source util/ci_utils.sh
  #         echo "Running Open3D python tests..."
  #         run_python_tests
